import org.apache.commons.compress.archivers.ArchiveEntry
import org.apache.commons.compress.archivers.ArchiveException
import org.apache.commons.compress.archivers.ArchiveOutputStream
import org.apache.commons.compress.archivers.ArchiveStreamFactory

import java.nio.file.DirectoryStream
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

group 'somecompany'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
        classpath group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'org.apache.commons:commons-compress:1.18'
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
}
//task compressDockerfile {
//    def resPath = "${project.projectDir}/resources"
//    archive(Paths.get(resPath, "tomcat"), Paths.get(resPath, "tomcat-dockerfile.zip"), "docker", "ZIP")
//    archive(Paths.get(resPath, "wildfly"), Paths.get(resPath, "wildfly-dockerfile.zip"), "docker", "ZIP")
//}
//
//def archive(Path src, Path dest, String rootEntryName, String archiverName)
//        throws IOException {
//    Map<String, Path> targets = new HashMap<>()
//    bindFileInfos(targets, rootEntryName, src)
//    try {
//        OutputStream out = null
//        ArchiveOutputStream archiveOut = null
//        try {
//            out = Files.createFile(dest).newOutputStream()
//            archiveOut = new ArchiveStreamFactory().createArchiveOutputStream(archiverName, out)
//            for (Map.Entry<String, Path> e : targets.entrySet()) {
//                String name = e.getKey()
//                Path path = e.getValue()
//                ArchiveEntry entry = archiveOut.createArchiveEntry(path.toFile(), name)
//                archiveOut.putArchiveEntry(entry)
//                if (Files.isRegularFile(path)) {
//                    InputStream i = Files.newInputStream(path)
//                    try {
//                        archiveOut << i
//                    } finally {
//                        i.close()
//                    }
//                }
//                archiveOut.closeArchiveEntry()
//            }
//        } finally {
//            if (archiveOut != null) archiveOut.close()
//            if (out != null) out.close()
//        }
//    } catch (ArchiveException e) {
//        throw new RuntimeException("archive not support [" + archiverName + "]")
//    }
//}
//
//def bindFileInfos(Map<String, Path> targets, String parentPath, Path path)
//        throws IOException {
//    if (Files.isDirectory(path)) {
//        DirectoryStream<Path> stream = Files.newDirectoryStream(path)
//        try {
//            for (Path p : stream) {
//                if (Files.isDirectory(p)) {
//                    bindFileInfos(targets, parentPath + "/" + p.getFileName(), p)
//                } else {
//                    targets.put(parentPath + "/" + p.getFileName(), p)
//                }
//            }
//        } finally {
//            stream.close()
//        }
//    } else {
//        targets.put(parentPath + "/" + path.getFileName(), path)
//    }
//}
